// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// prisma/schema.prisma

model User {
  id                  String      @id @default(cuid())
  name                String?
  email               String?     @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  bookings            Booking[]
  role                UserRole    @default(CUSTOMER)

  // INÍCIO DA ALTERAÇÃO (Opção B)
  // Se um BARBER ou OWNER gerencia/trabalha em UMA barbearia
  managedBarbershopId String?      // ID da barbearia que este usuário gerencia/trabalha
  managedBarbershop   Barbershop?  @relation("ManagedByUsers", fields: [managedBarbershopId], references: [id])
  // FIM DA ALTERAÇÃO
}

enum UserRole {
  CUSTOMER
  BARBER
  OWNER
}

model Barbershop {
  id                  String   @id @default(cuid())
  name                String
  address             String
  imageUrl            String
  description         String  
  services            Service[]
  bookings            Booking[]
  ratings             String  
  stars               String  
  telefone            String  
  operatingHours      OperatingHours[]
  localizacaomaps     String?

  // INÍCIO DA ALTERAÇÃO (Opção B)
  // Relação inversa para usuários que gerenciam/trabalham nesta barbearia
  managingUsers       User[]   @relation("ManagedByUsers")
  // FIM DA ALTERAÇÃO
}

// ... (restante do seu schema: OperatingHours, Service, Booking, Account, Session, VerificationToken)
// Mantenha os outros modelos como estavam na resposta anterior.
model OperatingHours {
  id            String     @id @default(cuid())
  barbershop    Barbershop @relation(fields: [barbershopId], references: [id])
  barbershopId  String
  dayOfWeek     Int        // 0 para Domingo, 1 para Segunda, ..., 6 para Sábado
  startTime     String     // Formato "HH:mm"
  endTime       String     // Formato "HH:mm"
  isClosed      Boolean    @default(false)

  @@unique([barbershopId, dayOfWeek])
}

model Service {
  id           String      @id @default(cuid())
  name         String
  price        Decimal     @db.Decimal(10, 2)
  barbershop   Barbershop  @relation(fields: [barbershopId], references: [id])
  barbershopId String
  description  String
  imageUrl     String     
  bookings     Booking[]
}

model Booking {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id])
  userId       String
  service      Service    @relation(fields: [serviceId], references: [id])
  serviceId    String
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  barbershopId String
  date         DateTime
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}